{
  "BlossomStatus": {
    "parent": []
  },
  "BlossomTransparentStatus": {
    "parent": []
  },
  "BlossomSize": {
    "parent": []
  },
  "BlossomColor": {
    "parent": []
  },
  "ColorVariants": {
    "parent": []
  },
  "TransparentColorVariants": {
    "parent": []
  },
  "ThemeColorNames": {
    "parent": []
  },
  "SemanticColorNames": {
    "parent": []
  },
  "SurfaceColorNames": {
    "parent": []
  },
  "BlossomThemeColors": {
    "parent": []
  },
  "BlossomContext": {
    "properties": [
      {
        "name": "colors",
        "dataType": "BlossomThemeColors",
        "description": null,
        "comment": ""
      },
      {
        "name": "isDark",
        "dataType": "boolean",
        "description": null,
        "comment": ""
      },
      {
        "name": "options",
        "dataType": "BlossomUIOptions",
        "description": null,
        "comment": ""
      }
    ],
    "parent": []
  },
  "Children": {
    "parent": []
  },
  "BlossomThemeProviderProps": {
    "parent": []
  },
  "TypographyValues": {
    "parent": []
  },
  "BlossomUIOptions": {
    "parent": []
  },
  "TypographyOptions": {
    "parent": []
  },
  "BaseUIProps": {
    "properties": [
      {
        "name": "status",
        "dataType": "BlossomStatus",
        "defaultValue": "primary",
        "description": null,
        "comment": ""
      },
      {
        "name": "size",
        "dataType": "BlossomSize",
        "defaultValue": "medium",
        "description": null,
        "comment": ""
      }
    ],
    "parent": []
  },
  "OmitSizeProps": {
    "parent": []
  },
  "ThemeValues": {
    "parent": []
  },
  "ComponentPropsObjectMap": {
    "parent": []
  },
  "TextProps": {
    "properties": [
      {
        "name": "typography",
        "dataType": "TypographyOptions",
        "defaultValue": "b2",
        "description": null,
        "comment": "Typography option to control the size of the text"
      }
    ],
    "parent": [
      "TextProps$1",
      "OmitSizeProps"
    ]
  },
  "SizedTextProps": {
    "properties": [
      {
        "name": "mode",
        "dataType": "\"label\" | \"caption\" | \"body\"",
        "defaultValue": "label",
        "description": null,
        "comment": "Mode of the text label or captionCaption will be used for both a caption or error text in form control inputs"
      },
      {
        "name": "typography",
        "dataType": "TypographyOptions",
        "defaultValue": "b2",
        "description": null,
        "comment": "Typography option to control the size of the text"
      },
      {
        "name": "size",
        "dataType": "BlossomSize",
        "defaultValue": "medium",
        "description": null,
        "comment": ""
      }
    ],
    "parent": [
      "TextProps",
      "BaseUIProps"
    ]
  },
  "LinkProps": {
    "properties": [
      {
        "name": "leftText",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Set the left side of the text"
      },
      {
        "name": "rightText",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Set the left side of the text"
      },
      {
        "name": "title",
        "dataType": "string",
        "description": null,
        "comment": "Set the link label to show"
      },
      {
        "name": "href",
        "dataType": "string",
        "description": null,
        "comment": "Set the href url for link"
      },
      {
        "name": "typography",
        "dataType": "TypographyOptions",
        "defaultValue": "b2",
        "description": null,
        "comment": "Typography option to control the size of the text"
      }
    ],
    "parent": [
      "TextProps"
    ]
  },
  "ViewProps": {
    "properties": [
      {
        "name": "row",
        "dataType": "boolean",
        "description": null,
        "comment": "Set true for horizontal(flexDirection) view"
      }
    ],
    "parent": [
      "ViewProps$1"
    ]
  },
  "SpacerProps": {
    "properties": [
      {
        "name": "width",
        "dataType": "number",
        "description": null,
        "comment": "Width of the spacer"
      },
      {
        "name": "height",
        "dataType": "number",
        "description": null,
        "comment": "Height of the spacer"
      }
    ],
    "parent": [
      "ViewProps$1"
    ]
  },
  "AccordionProps": {
    "properties": [
      {
        "name": "isCollapsed",
        "dataType": "boolean",
        "description": null,
        "comment": "Set it to true to open the accordion"
      },
      {
        "name": "title",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Title of the accordion"
      },
      {
        "name": "subtitle",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Title of the accordion"
      },
      {
        "name": "description",
        "dataType": "string",
        "description": null,
        "comment": "Title of the accordion"
      },
      {
        "name": "children",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Render custom view inside the accordion instead of the description only"
      },
      {
        "name": "left",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Render any icon/JSX on left of the title"
      },
      {
        "name": "right",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Render any icon/JSX on right of the title"
      },
      {
        "name": "containerStyle",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "Container style for the accordion"
      },
      {
        "name": "onPress",
        "dataType": "() => void",
        "description": null,
        "comment": "On press callback on the title section"
      }
    ],
    "parent": []
  },
  "ButtonMode": {
    "parent": []
  },
  "ButtonProps": {
    "properties": [
      {
        "name": "mode",
        "dataType": "ButtonMode",
        "defaultValue": "filled",
        "description": null,
        "comment": "Change the appearance of the button using this"
      },
      {
        "name": "title",
        "dataType": "string",
        "description": null,
        "comment": "Button title text"
      },
      {
        "name": "titleStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Title text style"
      },
      {
        "name": "style",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "Button style to add padding/margin etc."
      },
      {
        "name": "isLoading",
        "dataType": "boolean",
        "description": null,
        "comment": "Set it to true to show the activity indicator to the left"
      },
      {
        "name": "disabled",
        "dataType": "boolean",
        "description": null,
        "comment": "Set to true to disable the button"
      },
      {
        "name": "disabledStyle",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "button style for disabled state"
      },
      {
        "name": "disabledTitleStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "button text style for disabled state"
      },
      {
        "name": "left",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Render any icon/JSX on left of the title"
      },
      {
        "name": "right",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Render any icon/JSX on right of the title"
      },
      {
        "name": "loaderProps",
        "dataType": "ActivityIndicatorProps",
        "description": null,
        "comment": "Loader props"
      },
      {
        "name": "status",
        "dataType": "BlossomStatus",
        "defaultValue": "primary",
        "description": null,
        "comment": ""
      },
      {
        "name": "size",
        "dataType": "BlossomSize",
        "defaultValue": "medium",
        "description": null,
        "comment": ""
      }
    ],
    "parent": [
      "PressableProps",
      "BaseUIProps"
    ]
  },
  "BaseButtonProps": {
    "properties": [
      {
        "name": "viewOnly",
        "dataType": "boolean",
        "description": null,
        "comment": "Set it to true to make it unselectable"
      },
      {
        "name": "onTextColorChange",
        "dataType": "(textColor: string) => void",
        "description": null,
        "comment": "Callback on text color change"
      },
      {
        "name": "onBackgroundColorChange",
        "dataType": "(backgroundColor: string) => void",
        "description": null,
        "comment": "Callback on background color change"
      },
      {
        "name": "mode",
        "dataType": "ButtonMode",
        "defaultValue": "filled",
        "description": null,
        "comment": "Change the appearance of the button using this"
      },
      {
        "name": "title",
        "dataType": "string",
        "description": null,
        "comment": "Button title text"
      },
      {
        "name": "titleStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Title text style"
      },
      {
        "name": "style",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "Button style to add padding/margin etc."
      },
      {
        "name": "isLoading",
        "dataType": "boolean",
        "description": null,
        "comment": "Set it to true to show the activity indicator to the left"
      },
      {
        "name": "disabled",
        "dataType": "boolean",
        "description": null,
        "comment": "Set to true to disable the button"
      },
      {
        "name": "disabledStyle",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "button style for disabled state"
      },
      {
        "name": "disabledTitleStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "button text style for disabled state"
      },
      {
        "name": "left",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Render any icon/JSX on left of the title"
      },
      {
        "name": "right",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Render any icon/JSX on right of the title"
      },
      {
        "name": "loaderProps",
        "dataType": "ActivityIndicatorProps",
        "description": null,
        "comment": "Loader props"
      },
      {
        "name": "status",
        "dataType": "BlossomStatus",
        "defaultValue": "primary",
        "description": null,
        "comment": ""
      },
      {
        "name": "size",
        "dataType": "BlossomSize",
        "defaultValue": "medium",
        "description": null,
        "comment": ""
      }
    ],
    "parent": [
      "ButtonProps"
    ]
  },
  "PressableState": {
    "parent": []
  },
  "FABProps": {
    "properties": [
      {
        "name": "icon",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Set the icon of the FAB"
      },
      {
        "name": "offsetX",
        "dataType": "number",
        "defaultValue": "48",
        "description": null,
        "comment": "Horizontal offset position for the fab"
      },
      {
        "name": "offsetY",
        "dataType": "number",
        "defaultValue": "48",
        "description": null,
        "comment": "Vertical offset position for the fab"
      },
      {
        "name": "mode",
        "dataType": "ButtonMode",
        "defaultValue": "filled",
        "description": null,
        "comment": "Change the appearance of the button using this"
      },
      {
        "name": "title",
        "dataType": "string",
        "description": null,
        "comment": "Button title text"
      },
      {
        "name": "titleStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Title text style"
      },
      {
        "name": "style",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "Button style to add padding/margin etc."
      },
      {
        "name": "isLoading",
        "dataType": "boolean",
        "description": null,
        "comment": "Set it to true to show the activity indicator to the left"
      },
      {
        "name": "disabled",
        "dataType": "boolean",
        "description": null,
        "comment": "Set to true to disable the button"
      },
      {
        "name": "disabledStyle",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "button style for disabled state"
      },
      {
        "name": "disabledTitleStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "button text style for disabled state"
      },
      {
        "name": "left",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Render any icon/JSX on left of the title"
      },
      {
        "name": "right",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Render any icon/JSX on right of the title"
      },
      {
        "name": "loaderProps",
        "dataType": "ActivityIndicatorProps",
        "description": null,
        "comment": "Loader props"
      },
      {
        "name": "status",
        "dataType": "BlossomStatus",
        "defaultValue": "primary",
        "description": null,
        "comment": ""
      },
      {
        "name": "size",
        "dataType": "BlossomSize",
        "defaultValue": "medium",
        "description": null,
        "comment": ""
      }
    ],
    "parent": [
      "ButtonProps"
    ]
  },
  "ChipProps": {
    "properties": [
      {
        "name": "checkIcon",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Use any custom icon for selected state"
      },
      {
        "name": "isSelected",
        "dataType": "boolean",
        "description": null,
        "comment": "Set it to true if selected"
      },
      {
        "name": "withCheckIcon",
        "dataType": "boolean",
        "description": null,
        "comment": "Show the select icon"
      },
      {
        "name": "clearable",
        "dataType": "boolean",
        "description": null,
        "comment": "Show the close icon at right to clear the selection"
      },
      {
        "name": "viewOnly",
        "dataType": "boolean",
        "description": null,
        "comment": "Set it to true to make it unselectable"
      },
      {
        "name": "onClearPress",
        "dataType": "() => void",
        "description": null,
        "comment": "On clear callback"
      },
      {
        "name": "asBadge",
        "dataType": "boolean",
        "description": null,
        "comment": "Render it as a badge"
      },
      {
        "name": "mode",
        "dataType": "ButtonMode",
        "defaultValue": "filled",
        "description": null,
        "comment": "Change the appearance of the button using this"
      },
      {
        "name": "title",
        "dataType": "string",
        "description": null,
        "comment": "Button title text"
      },
      {
        "name": "titleStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Title text style"
      },
      {
        "name": "style",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "Button style to add padding/margin etc."
      },
      {
        "name": "isLoading",
        "dataType": "boolean",
        "description": null,
        "comment": "Set it to true to show the activity indicator to the left"
      },
      {
        "name": "disabled",
        "dataType": "boolean",
        "description": null,
        "comment": "Set to true to disable the button"
      },
      {
        "name": "disabledStyle",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "button style for disabled state"
      },
      {
        "name": "disabledTitleStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "button text style for disabled state"
      },
      {
        "name": "left",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Render any icon/JSX on left of the title"
      },
      {
        "name": "right",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Render any icon/JSX on right of the title"
      },
      {
        "name": "loaderProps",
        "dataType": "ActivityIndicatorProps",
        "description": null,
        "comment": "Loader props"
      },
      {
        "name": "status",
        "dataType": "BlossomStatus",
        "defaultValue": "primary",
        "description": null,
        "comment": ""
      },
      {
        "name": "size",
        "dataType": "BlossomSize",
        "defaultValue": "medium",
        "description": null,
        "comment": ""
      }
    ],
    "parent": [
      "ButtonProps"
    ]
  },
  "SegmentedButtonProps": {
    "properties": [
      {
        "name": "data",
        "dataType": "ControlButtonProps[]",
        "description": null,
        "comment": "List of props for control buttons"
      },
      {
        "name": "mode",
        "dataType": "ButtonMode",
        "description": null,
        "comment": "Mode of the button view"
      },
      {
        "name": "fullWidth",
        "dataType": "boolean",
        "description": null,
        "comment": "Take the full width available"
      },
      {
        "name": "borderRadius",
        "dataType": "number",
        "description": null,
        "comment": "Control the border radius of the edge buttons"
      },
      {
        "name": "withVerticalDivider",
        "dataType": "boolean",
        "description": null,
        "comment": "Show the vertical divider between the buttons"
      },
      {
        "name": "multiSelect",
        "dataType": "boolean",
        "description": null,
        "comment": "Set to true for multiple select"
      },
      {
        "name": "activeColor",
        "dataType": "string",
        "description": null,
        "comment": "active color when the button is selected"
      },
      {
        "name": "inactiveColor",
        "dataType": "string",
        "description": null,
        "comment": "inactive color when the button is unselected"
      },
      {
        "name": "style",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "Container style"
      },
      {
        "name": "disabled",
        "dataType": "boolean",
        "description": null,
        "comment": "Disable the whole control"
      },
      {
        "name": "onPress",
        "dataType": "(value: string, selectedIndex: number) => void",
        "description": null,
        "comment": "OnPress callback with value"
      },
      {
        "name": "status",
        "dataType": "BlossomStatus",
        "defaultValue": "primary",
        "description": null,
        "comment": ""
      },
      {
        "name": "size",
        "dataType": "BlossomSize",
        "defaultValue": "medium",
        "description": null,
        "comment": ""
      }
    ],
    "parent": [
      "BaseUIProps"
    ]
  },
  "ControlButtonProps": {
    "properties": [
      {
        "name": "label",
        "dataType": "string",
        "description": null,
        "comment": "Label of the control button"
      },
      {
        "name": "value",
        "dataType": "string",
        "description": null,
        "comment": "Value of the control button that will be passed to on Press & will fallback to label if not passed"
      },
      {
        "name": "checkIcon",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Use any custom icon for selected state"
      },
      {
        "name": "isSelected",
        "dataType": "boolean",
        "description": null,
        "comment": "Set it to true if selected"
      },
      {
        "name": "withCheckIcon",
        "dataType": "boolean",
        "description": null,
        "comment": "Show the select icon"
      },
      {
        "name": "clearable",
        "dataType": "boolean",
        "description": null,
        "comment": "Show the close icon at right to clear the selection"
      },
      {
        "name": "viewOnly",
        "dataType": "boolean",
        "description": null,
        "comment": "Set it to true to make it unselectable"
      },
      {
        "name": "onClearPress",
        "dataType": "() => void",
        "description": null,
        "comment": "On clear callback"
      },
      {
        "name": "asBadge",
        "dataType": "boolean",
        "description": null,
        "comment": "Render it as a badge"
      },
      {
        "name": "mode",
        "dataType": "ButtonMode",
        "defaultValue": "filled",
        "description": null,
        "comment": "Change the appearance of the button using this"
      },
      {
        "name": "title",
        "dataType": "string",
        "description": null,
        "comment": "Button title text"
      },
      {
        "name": "titleStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Title text style"
      },
      {
        "name": "style",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "Button style to add padding/margin etc."
      },
      {
        "name": "isLoading",
        "dataType": "boolean",
        "description": null,
        "comment": "Set it to true to show the activity indicator to the left"
      },
      {
        "name": "disabled",
        "dataType": "boolean",
        "description": null,
        "comment": "Set to true to disable the button"
      },
      {
        "name": "disabledStyle",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "button style for disabled state"
      },
      {
        "name": "disabledTitleStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "button text style for disabled state"
      },
      {
        "name": "left",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Render any icon/JSX on left of the title"
      },
      {
        "name": "right",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Render any icon/JSX on right of the title"
      },
      {
        "name": "loaderProps",
        "dataType": "ActivityIndicatorProps",
        "description": null,
        "comment": "Loader props"
      },
      {
        "name": "status",
        "dataType": "BlossomStatus",
        "defaultValue": "primary",
        "description": null,
        "comment": ""
      },
      {
        "name": "size",
        "dataType": "BlossomSize",
        "defaultValue": "medium",
        "description": null,
        "comment": ""
      }
    ],
    "parent": [
      "ChipProps"
    ]
  },
  "ActivityIndicatorProps": {
    "properties": [
      {
        "name": "visible",
        "dataType": "boolean",
        "defaultValue": "true",
        "description": null,
        "comment": "Set to false to hide it"
      },
      {
        "name": "size",
        "dataType": "number | BlossomSize",
        "defaultValue": "medium",
        "description": null,
        "comment": "Control the size using pre-defined options"
      },
      {
        "name": "label",
        "dataType": "string",
        "description": null,
        "comment": "Label text below indicator"
      },
      {
        "name": "labelStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Label text style"
      },
      {
        "name": "containerStyle",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "Container style wrapping both label and ActivityIndicator"
      }
    ],
    "parent": [
      "Omit<ActivityIndicatorProps$1, 'size'>",
      "Omit<BaseUIProps, 'size'>"
    ]
  },
  "TextInputMode": {
    "parent": []
  },
  "TextInputProps": {
    "properties": [
      {
        "name": "mode",
        "dataType": "\"outlined\" | \"flat\"",
        "defaultValue": "outlined",
        "description": null,
        "comment": "Control the different modes of the text input"
      },
      {
        "name": "dense",
        "dataType": "boolean",
        "description": null,
        "comment": "Have a denser background in the text input"
      },
      {
        "name": "label",
        "dataType": "string",
        "description": null,
        "comment": "Label text above the input"
      },
      {
        "name": "placeholder",
        "dataType": "string",
        "description": null,
        "comment": "Placeholder for the text input"
      },
      {
        "name": "caption",
        "dataType": "string",
        "description": null,
        "comment": "Caption text below the text input"
      },
      {
        "name": "error",
        "dataType": "string",
        "description": "Error text in error status below caption text",
        "comment": "TODO: TextInput will always render this and take the space to fix the flicker issue in show/hide error"
      },
      {
        "name": "labelStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Label text style"
      },
      {
        "name": "placeholderStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Placeholder text style"
      },
      {
        "name": "captionStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Caption text style"
      },
      {
        "name": "errorStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Error text style"
      },
      {
        "name": "containerStyle",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "Container view style"
      },
      {
        "name": "inputStyle",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "Input box style"
      },
      {
        "name": "textStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Input text style equivalent to react-native style for TextInput"
      },
      {
        "name": "disabled",
        "dataType": "boolean",
        "description": null,
        "comment": "Set to true to disable the button"
      },
      {
        "name": "left",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Render Icon/JSX on the left of the button"
      },
      {
        "name": "right",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Render Icon/JSX on the right of the button"
      },
      {
        "name": "status",
        "dataType": "BlossomStatus",
        "defaultValue": "primary",
        "description": null,
        "comment": ""
      },
      {
        "name": "size",
        "dataType": "BlossomSize",
        "defaultValue": "medium",
        "description": null,
        "comment": ""
      }
    ],
    "parent": [
      "Omit<TextInputProps$1, 'style'>",
      "BaseUIProps"
    ]
  },
  "SearchInputProps": {
    "properties": [
      {
        "name": "withClearIcon",
        "dataType": "boolean",
        "description": null,
        "comment": ""
      },
      {
        "name": "onQueryChange",
        "dataType": "(query: string) => void",
        "description": null,
        "comment": ""
      },
      {
        "name": "debounceDelay",
        "dataType": "number",
        "description": null,
        "comment": ""
      },
      {
        "name": "mode",
        "dataType": "\"outlined\" | \"flat\"",
        "defaultValue": "outlined",
        "description": null,
        "comment": "Control the different modes of the text input"
      },
      {
        "name": "dense",
        "dataType": "boolean",
        "description": null,
        "comment": "Have a denser background in the text input"
      },
      {
        "name": "label",
        "dataType": "string",
        "description": null,
        "comment": "Label text above the input"
      },
      {
        "name": "placeholder",
        "dataType": "string",
        "description": null,
        "comment": "Placeholder for the text input"
      },
      {
        "name": "caption",
        "dataType": "string",
        "description": null,
        "comment": "Caption text below the text input"
      },
      {
        "name": "error",
        "dataType": "string",
        "description": "Error text in error status below caption text",
        "comment": "TODO: TextInput will always render this and take the space to fix the flicker issue in show/hide error"
      },
      {
        "name": "labelStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Label text style"
      },
      {
        "name": "placeholderStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Placeholder text style"
      },
      {
        "name": "captionStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Caption text style"
      },
      {
        "name": "errorStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Error text style"
      },
      {
        "name": "containerStyle",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "Container view style"
      },
      {
        "name": "inputStyle",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "Input box style"
      },
      {
        "name": "textStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Input text style equivalent to react-native style for TextInput"
      },
      {
        "name": "disabled",
        "dataType": "boolean",
        "description": null,
        "comment": "Set to true to disable the button"
      },
      {
        "name": "left",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Render Icon/JSX on the left of the button"
      },
      {
        "name": "right",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Render Icon/JSX on the right of the button"
      },
      {
        "name": "status",
        "dataType": "BlossomStatus",
        "defaultValue": "primary",
        "description": null,
        "comment": ""
      },
      {
        "name": "size",
        "dataType": "BlossomSize",
        "defaultValue": "medium",
        "description": null,
        "comment": ""
      }
    ],
    "parent": [
      "TextInputProps"
    ]
  },
  "OtpInputProps": {
    "properties": [
      {
        "name": "maxLength",
        "dataType": "number",
        "defaultValue": "4",
        "description": null,
        "comment": "Set the otp input length"
      },
      {
        "name": "boxStyle",
        "dataType": "StyleProp<ViewStyle> | ((isFocused: boolean) => StyleProp<ViewStyle>)",
        "description": null,
        "comment": "Set the style for each box with isFocused prop"
      },
      {
        "name": "mode",
        "dataType": "\"box\" | \"dash\"",
        "defaultValue": "box",
        "description": null,
        "comment": "different view based on the mode"
      },
      {
        "name": "withCursor",
        "dataType": "boolean",
        "description": null,
        "comment": "Set it to true to enable otp cursor"
      },
      {
        "name": "withAlphanumericKeyboard",
        "dataType": "boolean",
        "description": null,
        "comment": "Set the alphanumeric keyboard"
      },
      {
        "name": "onComplete",
        "dataType": "(otp: string) => void",
        "description": null,
        "comment": "onComplete callback with otp input text"
      }
    ],
    "parent": [
      "Omit<TextInputProps, 'mode'>"
    ]
  },
  "OtpInputRef": {
    "parent": []
  },
  "DividerProps": {
    "properties": [
      {
        "name": "width",
        "dataType": "DimensionValue",
        "defaultValue": "100%",
        "description": null,
        "comment": "Control Width of the divider"
      },
      {
        "name": "height",
        "dataType": "DimensionValue",
        "defaultValue": "0.6",
        "description": null,
        "comment": "Control height of the divider"
      },
      {
        "name": "color",
        "dataType": "string",
        "defaultValue": "background900",
        "description": null,
        "comment": "Color of the divider"
      },
      {
        "name": "label",
        "dataType": "string",
        "description": null,
        "comment": "Label inside the divider"
      },
      {
        "name": "labelPosition",
        "dataType": "\"left\" | \"right\" | \"center\"",
        "defaultValue": "center",
        "description": null,
        "comment": "Label position where it will be rendered"
      },
      {
        "name": "row",
        "dataType": "boolean",
        "description": null,
        "comment": "Set true for horizontal(flexDirection) view"
      }
    ],
    "parent": [
      "ViewProps"
    ]
  },
  "ShimmerViewProps": {
    "properties": [
      {
        "name": "animated",
        "dataType": "boolean",
        "defaultValue": "true",
        "description": null,
        "comment": "Set it to false to disable the animation"
      },
      {
        "name": "visible",
        "dataType": "boolean",
        "defaultValue": "true",
        "description": null,
        "comment": "Set it to false to Hide the shimmer view and show it's children"
      },
      {
        "name": "circular",
        "dataType": "boolean",
        "description": null,
        "comment": "Set it to true to have the circular shape"
      },
      {
        "name": "borderRadius",
        "dataType": "number",
        "description": null,
        "comment": "Border radius of the view"
      },
      {
        "name": "duration",
        "dataType": "number",
        "defaultValue": "1000",
        "description": null,
        "comment": "Set it to false to disable the animation"
      },
      {
        "name": "width",
        "dataType": "DimensionValue",
        "defaultValue": "100%",
        "description": null,
        "comment": "Control Width of the divider"
      },
      {
        "name": "height",
        "dataType": "DimensionValue",
        "defaultValue": "0.6",
        "description": null,
        "comment": "Control height of the divider"
      },
      {
        "name": "color",
        "dataType": "string",
        "defaultValue": "background900",
        "description": null,
        "comment": "Color of the divider"
      },
      {
        "name": "label",
        "dataType": "string",
        "description": null,
        "comment": "Label inside the divider"
      },
      {
        "name": "labelPosition",
        "dataType": "\"left\" | \"right\" | \"center\"",
        "defaultValue": "center",
        "description": null,
        "comment": "Label position where it will be rendered"
      },
      {
        "name": "row",
        "dataType": "boolean",
        "description": null,
        "comment": "Set true for horizontal(flexDirection) view"
      }
    ],
    "parent": [
      "DividerProps"
    ]
  },
  "CardProps": {
    "properties": [
      {
        "name": "shadow",
        "dataType": "boolean",
        "description": null,
        "comment": ""
      },
      {
        "name": "row",
        "dataType": "boolean",
        "description": null,
        "comment": "Set true for horizontal(flexDirection) view"
      }
    ],
    "parent": [
      "ViewProps"
    ]
  },
  "AvatarProps": {
    "properties": [
      {
        "name": "size",
        "dataType": "number | BlossomSize",
        "description": null,
        "comment": "Size of the AvatarIt can be either number or string ('small' | 'medium' | 'large')"
      },
      {
        "name": "mode",
        "dataType": "\"circle\" | \"round\" | \"square\"",
        "description": null,
        "comment": "Control the shape of the Avatar"
      },
      {
        "name": "url",
        "dataType": "string",
        "description": null,
        "comment": "Shorthand for the Source.uri of the image propsHere You can directly pass the url of the image\nIf not provided, it will fallback to showing initials or an icon."
      },
      {
        "name": "initials",
        "dataType": "string",
        "description": null,
        "comment": "Show initials inside the AvatarIf not provided, it will fallback to showing an icon."
      },
      {
        "name": "initialStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Initials Text style to control the font size etc."
      },
      {
        "name": "icon",
        "dataType": "(size: number) => ReactNode",
        "description": null,
        "comment": "Set a custom icon for Avatar"
      },
      {
        "name": "onPress",
        "dataType": "() => void",
        "description": null,
        "comment": "On press callback"
      }
    ],
    "parent": [
      "Partial<ImageProps>",
      "OmitSizeProps"
    ]
  },
  "IconFamily": {
    "parent": []
  },
  "IconProps": {
    "properties": [
      {
        "name": "family",
        "dataType": "IconFamily",
        "defaultValue": "Ionicons",
        "description": null,
        "comment": "Vector icons family from vector-icons set"
      },
      {
        "name": "size",
        "dataType": "number",
        "defaultValue": "24",
        "description": null,
        "comment": "Size of the icon, can also be passed as fontSize in the style object."
      },
      {
        "name": "name",
        "dataType": "string",
        "description": null,
        "comment": "Name of the icon to show"
      },
      {
        "name": "color",
        "dataType": "number | ColorValue",
        "description": null,
        "comment": "Set custom icon color"
      }
    ],
    "parent": [
      "TextProps$1",
      "OmitSizeProps"
    ]
  },
  "BaseBooleanFieldProps": {
    "properties": [
      {
        "name": "position",
        "dataType": "\"left\" | \"right\"",
        "defaultValue": "right",
        "description": null,
        "comment": "Control the position of the field"
      },
      {
        "name": "adjacent",
        "dataType": "boolean",
        "defaultValue": "true",
        "description": null,
        "comment": "Set it to false to position them apart i.e. space-between"
      },
      {
        "name": "disabled",
        "dataType": "boolean",
        "description": null,
        "comment": "Set to true for disabled field"
      },
      {
        "name": "color",
        "dataType": "string",
        "description": null,
        "comment": "Set custom color"
      },
      {
        "name": "label",
        "dataType": "string",
        "description": null,
        "comment": "Label text above the input"
      },
      {
        "name": "caption",
        "dataType": "string",
        "description": null,
        "comment": "Caption text below the text input"
      },
      {
        "name": "error",
        "dataType": "string",
        "description": null,
        "comment": "Error text in error `status` below caption text"
      },
      {
        "name": "containerStyle",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "Container view style"
      },
      {
        "name": "labelStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Label text style"
      },
      {
        "name": "captionStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Caption text style"
      },
      {
        "name": "errorStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Error text style"
      },
      {
        "name": "status",
        "dataType": "BlossomStatus",
        "defaultValue": "primary",
        "description": null,
        "comment": ""
      },
      {
        "name": "size",
        "dataType": "BlossomSize",
        "defaultValue": "medium",
        "description": null,
        "comment": ""
      },
      {
        "name": "children",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Children"
      }
    ],
    "parent": [
      "BaseUIProps",
      "Children"
    ]
  },
  "SwitchProps": {
    "properties": [
      {
        "name": "position",
        "dataType": "\"left\" | \"right\"",
        "defaultValue": "right",
        "description": null,
        "comment": "Control the position of the field"
      },
      {
        "name": "adjacent",
        "dataType": "boolean",
        "defaultValue": "true",
        "description": null,
        "comment": "Set it to false to position them apart i.e. space-between"
      },
      {
        "name": "color",
        "dataType": "string",
        "description": null,
        "comment": "Set custom color"
      },
      {
        "name": "label",
        "dataType": "string",
        "description": null,
        "comment": "Label text above the input"
      },
      {
        "name": "caption",
        "dataType": "string",
        "description": null,
        "comment": "Caption text below the text input"
      },
      {
        "name": "error",
        "dataType": "string",
        "description": null,
        "comment": "Error text in error `status` below caption text"
      },
      {
        "name": "containerStyle",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "Container view style"
      },
      {
        "name": "labelStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Label text style"
      },
      {
        "name": "captionStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Caption text style"
      },
      {
        "name": "errorStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Error text style"
      },
      {
        "name": "status",
        "dataType": "BlossomStatus",
        "defaultValue": "primary",
        "description": null,
        "comment": ""
      },
      {
        "name": "size",
        "dataType": "BlossomSize",
        "defaultValue": "medium",
        "description": null,
        "comment": ""
      }
    ],
    "parent": [
      "SwitchProps$1",
      "BaseBooleanFieldProps"
    ]
  },
  "RadioProps": {
    "properties": [
      {
        "name": "position",
        "dataType": "\"left\" | \"right\"",
        "defaultValue": "right",
        "description": null,
        "comment": "Control the position of the field"
      },
      {
        "name": "adjacent",
        "dataType": "boolean",
        "defaultValue": "true",
        "description": null,
        "comment": "Set it to false to position them apart i.e. space-between"
      },
      {
        "name": "color",
        "dataType": "string",
        "description": null,
        "comment": "Set custom color"
      },
      {
        "name": "label",
        "dataType": "string",
        "description": null,
        "comment": "Label text above the input"
      },
      {
        "name": "caption",
        "dataType": "string",
        "description": null,
        "comment": "Caption text below the text input"
      },
      {
        "name": "error",
        "dataType": "string",
        "description": null,
        "comment": "Error text in error `status` below caption text"
      },
      {
        "name": "containerStyle",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "Container view style"
      },
      {
        "name": "labelStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Label text style"
      },
      {
        "name": "captionStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Caption text style"
      },
      {
        "name": "errorStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Error text style"
      },
      {
        "name": "status",
        "dataType": "BlossomStatus",
        "defaultValue": "primary",
        "description": null,
        "comment": ""
      },
      {
        "name": "size",
        "dataType": "BlossomSize",
        "defaultValue": "medium",
        "description": null,
        "comment": ""
      }
    ],
    "parent": [
      "SwitchProps$1",
      "BaseBooleanFieldProps"
    ]
  },
  "CheckboxProps": {
    "properties": [
      {
        "name": "value",
        "dataType": "boolean",
        "description": null,
        "comment": "Control the state of the checkbox with value"
      },
      {
        "name": "indeterminate",
        "dataType": "boolean",
        "description": null,
        "comment": "Set to true for an intermediate state"
      },
      {
        "name": "onValueChange",
        "dataType": "(value: boolean) => void | Promise<void>",
        "description": null,
        "comment": "Callback for on value change"
      },
      {
        "name": "style",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "Style of the checkbox"
      },
      {
        "name": "checkedIcon",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Render custom icon when value is true"
      },
      {
        "name": "uncheckedIcon",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Render custom icon when value is false"
      },
      {
        "name": "position",
        "dataType": "\"left\" | \"right\"",
        "defaultValue": "right",
        "description": null,
        "comment": "Control the position of the field"
      },
      {
        "name": "adjacent",
        "dataType": "boolean",
        "defaultValue": "true",
        "description": null,
        "comment": "Set it to false to position them apart i.e. space-between"
      },
      {
        "name": "disabled",
        "dataType": "boolean",
        "description": null,
        "comment": "Set to true for disabled field"
      },
      {
        "name": "color",
        "dataType": "string",
        "description": null,
        "comment": "Set custom color"
      },
      {
        "name": "label",
        "dataType": "string",
        "description": null,
        "comment": "Label text above the input"
      },
      {
        "name": "caption",
        "dataType": "string",
        "description": null,
        "comment": "Caption text below the text input"
      },
      {
        "name": "error",
        "dataType": "string",
        "description": null,
        "comment": "Error text in error `status` below caption text"
      },
      {
        "name": "containerStyle",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "Container view style"
      },
      {
        "name": "labelStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Label text style"
      },
      {
        "name": "captionStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Caption text style"
      },
      {
        "name": "errorStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Error text style"
      },
      {
        "name": "status",
        "dataType": "BlossomStatus",
        "defaultValue": "primary",
        "description": null,
        "comment": ""
      },
      {
        "name": "size",
        "dataType": "BlossomSize",
        "defaultValue": "medium",
        "description": null,
        "comment": ""
      },
      {
        "name": "children",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Children"
      }
    ],
    "parent": [
      "BaseBooleanFieldProps"
    ]
  },
  "ComponentPropsMap": {
    "parent": []
  },
  "ModalProps": {
    "properties": [
      {
        "name": "onBackdropPress",
        "dataType": "() => void",
        "description": null,
        "comment": ""
      },
      {
        "name": "backdropStyle",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": ""
      },
      {
        "name": "contentStyle",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": ""
      }
    ],
    "parent": [
      "ModalProps$1"
    ]
  },
  "ModalContentProps": {
    "properties": [
      {
        "name": "title",
        "dataType": "string",
        "description": null,
        "comment": ""
      },
      {
        "name": "description",
        "dataType": "string",
        "description": null,
        "comment": ""
      },
      {
        "name": "children",
        "dataType": "string",
        "description": null,
        "comment": ""
      },
      {
        "name": "actionButtons",
        "dataType": "ButtonProps[]",
        "description": null,
        "comment": ""
      }
    ],
    "parent": []
  },
  "PopoverProps": {
    "properties": [
      {
        "name": "visible",
        "dataType": "boolean",
        "description": null,
        "comment": "Set it true to show the popover"
      },
      {
        "name": "children",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Popover JSX content to show"
      },
      {
        "name": "onBackdropPress",
        "dataType": "() => void",
        "description": null,
        "comment": "callback on clicking the outside area or back button of the popover to close it"
      },
      {
        "name": "contentStyle",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "Style of the popover shown"
      },
      {
        "name": "Target",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Render the target JSX using this prop"
      },
      {
        "name": "targetRef",
        "dataType": "LegacyRef<unknown>",
        "description": null,
        "comment": "Target ref object to control it without statesIf Target is passed then that will be given priority"
      },
      {
        "name": "fitTargetWidth",
        "dataType": "boolean",
        "description": null,
        "comment": "Set it true to have the same width as of the Target view"
      },
      {
        "name": "position",
        "dataType": "\"left\" | \"right\" | \"top\" | \"bottom\"",
        "defaultValue": "bottom",
        "description": null,
        "comment": "Popover content position"
      },
      {
        "name": "offset",
        "dataType": "number",
        "description": null,
        "comment": "Content offset"
      },
      {
        "name": "wrapContent",
        "dataType": "boolean",
        "description": null,
        "comment": "Wrap Content the popover"
      }
    ],
    "parent": []
  },
  "PopoverRef": {
    "properties": [
      {
        "name": "open",
        "dataType": "() => void",
        "description": null,
        "comment": "Open the popover"
      },
      {
        "name": "close",
        "dataType": "() => void",
        "description": null,
        "comment": "Close the popover"
      }
    ],
    "parent": []
  },
  "TooltipProps": {
    "properties": [
      {
        "name": "title",
        "dataType": "string",
        "description": null,
        "comment": "Title text for the tooltip"
      },
      {
        "name": "titleStyle",
        "dataType": "StyleProp<TextStyle>",
        "description": null,
        "comment": "Style of the tooltip title text"
      }
    ],
    "parent": [
      "Pick<PopoverProps, 'visible' | 'contentStyle' | 'Target' | 'onBackdropPress' | 'position' | 'offset'>"
    ]
  },
  "SelectItemT": {
    "properties": [
      {
        "name": "label",
        "dataType": "string",
        "description": null,
        "comment": "Label to show in the select"
      },
      {
        "name": "value",
        "dataType": "ItemT",
        "description": null,
        "comment": "Any value data for select"
      },
      {
        "name": "disabled",
        "dataType": "boolean",
        "description": null,
        "comment": "This will disable the item to be selected"
      }
    ],
    "parent": []
  },
  "SelectItemProps": {
    "properties": [
      {
        "name": "item",
        "dataType": "SelectItemT<ItemT>",
        "description": null,
        "comment": "Select Item object"
      },
      {
        "name": "isSelected",
        "dataType": "boolean",
        "description": null,
        "comment": "Set it to true to show the item selected"
      },
      {
        "name": "style",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "Item view style"
      },
      {
        "name": "onPress",
        "dataType": "() => void",
        "description": null,
        "comment": "Item on press callback"
      },
      {
        "name": "withTickIcon",
        "dataType": "boolean",
        "defaultValue": "true",
        "description": null,
        "comment": "Set it to true to show tick icon on the selected row"
      },
      {
        "name": "leftIcon",
        "dataType": "ReactNode",
        "description": null,
        "comment": "Render custom icon on left"
      },
      {
        "name": "status",
        "dataType": "BlossomStatus",
        "defaultValue": "primary",
        "description": null,
        "comment": ""
      },
      {
        "name": "size",
        "dataType": "BlossomSize",
        "defaultValue": "medium",
        "description": null,
        "comment": ""
      }
    ],
    "parent": [
      "BaseUIProps"
    ]
  },
  "RNFlatListProps": {
    "parent": []
  },
  "SelectProps": {
    "properties": [
      {
        "name": "options",
        "dataType": "SelectItemT<ItemT>[]",
        "description": null,
        "comment": "List of options"
      },
      {
        "name": "value",
        "dataType": "ItemT",
        "description": null,
        "comment": "Selected value from the data objecti.e. pass the `item.value` object that you get from `onValueChange`"
      },
      {
        "name": "defaultValue",
        "dataType": "ItemT",
        "description": null,
        "comment": "Default value from the item.value"
      },
      {
        "name": "displayValue",
        "dataType": "string",
        "description": null,
        "comment": "Set custom display value"
      },
      {
        "name": "isLoading",
        "dataType": "boolean",
        "description": null,
        "comment": "Set it true to show the loader"
      },
      {
        "name": "onValueChange",
        "dataType": "(selectedValue?: ItemT, selectedItem?: SelectItemT<ItemT>, index?: number) => void",
        "description": null,
        "comment": "Callback on every value change"
      },
      {
        "name": "onClearPress",
        "dataType": "() => void",
        "description": null,
        "comment": "On clear callback"
      },
      {
        "name": "searchable",
        "dataType": "boolean",
        "description": null,
        "comment": "Set it true to open keyboard and show search resultsTODO: add support for this"
      },
      {
        "name": "clearable",
        "dataType": "boolean",
        "description": null,
        "comment": "Show the close icon at right to clear the selection"
      },
      {
        "name": "pickerHeight",
        "dataType": "number",
        "description": null,
        "comment": "Height of the popover shown for selecting the item"
      },
      {
        "name": "pickerProps",
        "dataType": "Partial<Omit<FlatListProps<SelectItemT<ItemT>>, \"data\">>",
        "description": null,
        "comment": "Picker flat list props"
      },
      {
        "name": "renderItem",
        "dataType": "ListRenderItem<SelectItemT<ItemT>>",
        "description": null,
        "comment": "Render a custom view for picker item"
      },
      {
        "name": "inputProps",
        "dataType": "Omit<TextInputProps, \"defaultValue\" | \"value\">",
        "description": null,
        "comment": "Input props"
      },
      {
        "name": "status",
        "dataType": "BlossomStatus",
        "defaultValue": "primary",
        "description": null,
        "comment": ""
      },
      {
        "name": "size",
        "dataType": "BlossomSize",
        "defaultValue": "medium",
        "description": null,
        "comment": ""
      }
    ],
    "parent": [
      "BaseUIProps",
      "Pick<TextInputProps, 'placeholder' | 'disabled' | 'label'>"
    ]
  },
  "MultiSelectProps": {
    "properties": [
      {
        "name": "values",
        "dataType": "ItemT[]",
        "description": null,
        "comment": "List of selected item values"
      },
      {
        "name": "defaultValue",
        "dataType": "ItemT[]",
        "description": null,
        "comment": "List of default item values"
      },
      {
        "name": "onValuesChange",
        "dataType": "(selectedValues: ItemT[], selectedItems: SelectItemT<ItemT>[]) => void",
        "description": null,
        "comment": "Callback on select item press"
      },
      {
        "name": "maxSelectCount",
        "dataType": "number",
        "description": null,
        "comment": "Limit the selection to max count"
      }
    ],
    "parent": [
      "Omit<SelectProps<ItemT>, 'value' | 'onValueChange' | 'defaultValue'>"
    ]
  },
  "ProgressBarProps": {
    "properties": [
      {
        "name": "value",
        "dataType": "number",
        "description": null,
        "comment": "Progress value for the track color"
      },
      {
        "name": "width",
        "dataType": "number",
        "description": null,
        "comment": "Width of the progress bar"
      },
      {
        "name": "height",
        "dataType": "number",
        "description": null,
        "comment": "height of the progress bar"
      },
      {
        "name": "color",
        "dataType": "ColorValue",
        "description": null,
        "comment": "Background color of the unfilled color"
      },
      {
        "name": "trackColor",
        "dataType": "ColorValue",
        "description": null,
        "comment": "Main trackColor of the progress bar"
      },
      {
        "name": "indeterminate",
        "dataType": "boolean",
        "description": null,
        "comment": "Set it to true to have the infinite animation"
      },
      {
        "name": "style",
        "dataType": "StyleProp<ViewStyle>",
        "description": null,
        "comment": "Style of the container view"
      },
      {
        "name": "status",
        "dataType": "BlossomStatus",
        "defaultValue": "primary",
        "description": null,
        "comment": ""
      },
      {
        "name": "size",
        "dataType": "BlossomSize",
        "defaultValue": "medium",
        "description": null,
        "comment": ""
      }
    ],
    "parent": [
      "BaseUIProps"
    ]
  },
  "MonthNamesListProps": {
    "properties": [
      {
        "name": "currentMonth",
        "dataType": "number",
        "description": null,
        "comment": "The currently selected month (0-based index)."
      },
      {
        "name": "onItemPress",
        "dataType": "(monthIndex: number) => void",
        "description": null,
        "comment": "Callback for when a month is pressed."
      }
    ],
    "parent": []
  },
  "YearListProps": {
    "properties": [
      {
        "name": "currentYear",
        "dataType": "number",
        "description": null,
        "comment": "The currently selected year."
      },
      {
        "name": "minYear",
        "dataType": "number",
        "description": null,
        "comment": "The minimum selectable year."
      },
      {
        "name": "maxYear",
        "dataType": "number",
        "description": null,
        "comment": "The maximum selectable year."
      },
      {
        "name": "onItemPress",
        "dataType": "(year: number) => void",
        "description": null,
        "comment": "Callback triggered when a year is selected."
      }
    ],
    "parent": []
  },
  "YearsListRef": {
    "properties": [
      {
        "name": "loadPrevYears",
        "dataType": "() => void",
        "description": null,
        "comment": "Load the previous set of years."
      },
      {
        "name": "loadNextYears",
        "dataType": "() => void",
        "description": null,
        "comment": "Load the next set of years."
      },
      {
        "name": "hasMinYear",
        "dataType": "() => boolean",
        "description": null,
        "comment": "Check if there are more years available before the minYear."
      },
      {
        "name": "hasMaxYear",
        "dataType": "() => boolean",
        "description": null,
        "comment": "Check if there are more years available beyond the maxYear."
      }
    ],
    "parent": []
  },
  "MonthCalendarProps": {
    "properties": [
      {
        "name": "selectedDate",
        "dataType": "string | Date",
        "description": null,
        "comment": "The default selected date.Can be a string (formatted date) or a Date object."
      },
      {
        "name": "displayDateFormat",
        "dataType": "string",
        "description": null,
        "comment": "The format in which the date should be displayed inside the input value"
      },
      {
        "name": "outputDateFormat",
        "dataType": "string",
        "description": null,
        "comment": "The format in which the selected date should give outputAnd this format should be used whenever you are passing any date to this component"
      },
      {
        "name": "disableDates",
        "dataType": "(string | Date)[]",
        "description": null,
        "comment": "An array of disabled dates of string (in outputDateFormat) or a Date object.Make sure to provide the outputDateFormat prop too if passing date as string"
      },
      {
        "name": "onDateChange",
        "dataType": "(date?: Date, displayDate?: string, outputDate?: string) => void",
        "description": null,
        "comment": "Callback triggered when a date is selected."
      },
      {
        "name": "yearListProps",
        "dataType": "Pick<YearListProps, \"minYear\" | \"maxYear\">",
        "description": null,
        "comment": "Props for configuring the year list (min and max year)."
      },
      {
        "name": "status",
        "dataType": "BlossomStatus",
        "defaultValue": "primary",
        "description": null,
        "comment": ""
      },
      {
        "name": "size",
        "dataType": "BlossomSize",
        "defaultValue": "medium",
        "description": null,
        "comment": ""
      }
    ],
    "parent": [
      "BaseUIProps"
    ]
  },
  "BaseDatePickerProps": {
    "parent": []
  },
  "DatePickerProps": {
    "properties": [
      {
        "name": "defaultDate",
        "dataType": "string | Date",
        "description": null,
        "comment": "The default selected date.Can be a string (formatted date) or a Date object."
      },
      {
        "name": "clearable",
        "dataType": "boolean",
        "description": null,
        "comment": "Whether the date picker allows clearing the selected date."
      }
    ],
    "parent": [
      "BaseDatePickerProps"
    ]
  }
}
